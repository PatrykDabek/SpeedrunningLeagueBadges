{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Speedrunning League Badges \ud83c\udfae\ud83c\udfc6","text":"<p>Speedrunning League Badges is a repository focused on rewarding speedrunners with credits that they can use to purchase in-game merchandise.</p>"},{"location":"#about-the-project","title":"About the Project","text":"<p>This project implements a feature offering purchasable credits for in-game merchandise, celebrating milestones in speedrunning. The goal is to reward players for their performance while introducing a robust and scalable system for managing credits and achievements.</p> <p>For more details, check out the API Documentation.</p>"},{"location":"api_reference/credits/","title":"Credits","text":"<p>This class represents the credits that a user can use to purchase in-game merchandise.</p> <p>Credits class that contains the credits for a user.</p> Source code in <code>src/models/credits.py</code> <pre><code>class Credits:\n    \"\"\"Credits class that contains the credits for a user.\"\"\"\n\n    BASE_MULTIPLIER = 500\n    \"\"\"The base multiplier for calculating credits based on time taken.\"\"\"\n\n    BASE_CREDITS = 10\n    \"\"\"The base credits earned by speedrunning.\"\"\"\n\n    def __init__(self):\n        self._stored_credits: int = 0\n\n    def add_credits(self, amount: int) -&gt; None:\n        \"\"\"Add credits to the user's account.\"\"\"\n        if amount &lt; 0:\n            raise ValueError(\"Amount to add must be non-negative.\")\n        self._stored_credits += amount\n        logging.info(f\"Added {amount} credits. New balance: {self._stored_credits}\")\n\n    def remove_credits(self, amount: int) -&gt; None:\n        \"\"\"Remove credits from the user's account.\"\"\"\n        if amount &lt; 0:\n            raise ValueError(\"Amount to spend must be non-negative.\")\n        if amount &gt; self._stored_credits:\n            raise InsufficientCreditsError(\"Not enough credits to spend.\")\n        self._stored_credits -= amount\n        logging.info(f\"Removed {amount} credits. New balance: {self._stored_credits}\")\n\n    def update_credits(self, amount: int) -&gt; None:\n        \"\"\"Update credits by adding (positive) or spending (negative).\"\"\"\n        if amount &gt;= 0:\n            self.add_credits(amount)\n        else:\n            self.remove_credits(-amount)\n\n    def get_credits(self) -&gt; int:\n        \"\"\"Get the user's current credit balance.\"\"\"\n        return self._stored_credits\n\n    def award_credits(self, seconds_taken: float, base_credits: int = 10, leaderboard: dict | None = None) -&gt; int:\n        \"\"\"\n        Calculates and adds the credits earned based on time taken.\n        The faster the completion, the more credits earned.\n        Optionally applies leaderboard bonuses based on rank.\n        \"\"\"\n        if seconds_taken &lt;= 0:\n            raise ValueError(\"Time taken must be greater than zero.\")\n\n        multiplier = max(1, int(self.BASE_MULTIPLIER / seconds_taken))\n        earned_credits = int(base_credits * multiplier)\n\n        # Apply leaderboard bonus if leaderboard data is available\n        if leaderboard:\n            bonus_credits = Leaderboard.calculate_bonus(leaderboard, seconds_taken, earned_credits)\n            earned_credits += bonus_credits\n            logging.info(f\"Leaderboard bonus applied: {bonus_credits} credits.\")\n\n        self.add_credits(earned_credits)\n        logging.info(f\"Awarded {earned_credits} credits for {seconds_taken} seconds taken. New balance: {self._stored_credits}\")\n        return earned_credits\n</code></pre>"},{"location":"api_reference/credits/#src.models.credits.Credits.BASE_CREDITS","title":"<code>BASE_CREDITS = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The base credits earned by speedrunning.</p>"},{"location":"api_reference/credits/#src.models.credits.Credits.BASE_MULTIPLIER","title":"<code>BASE_MULTIPLIER = 500</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The base multiplier for calculating credits based on time taken.</p>"},{"location":"api_reference/credits/#src.models.credits.Credits.add_credits","title":"<code>add_credits(amount)</code>","text":"<p>Add credits to the user's account.</p> Source code in <code>src/models/credits.py</code> <pre><code>def add_credits(self, amount: int) -&gt; None:\n    \"\"\"Add credits to the user's account.\"\"\"\n    if amount &lt; 0:\n        raise ValueError(\"Amount to add must be non-negative.\")\n    self._stored_credits += amount\n    logging.info(f\"Added {amount} credits. New balance: {self._stored_credits}\")\n</code></pre>"},{"location":"api_reference/credits/#src.models.credits.Credits.award_credits","title":"<code>award_credits(seconds_taken, base_credits=10, leaderboard=None)</code>","text":"<p>Calculates and adds the credits earned based on time taken. The faster the completion, the more credits earned. Optionally applies leaderboard bonuses based on rank.</p> Source code in <code>src/models/credits.py</code> <pre><code>def award_credits(self, seconds_taken: float, base_credits: int = 10, leaderboard: dict | None = None) -&gt; int:\n    \"\"\"\n    Calculates and adds the credits earned based on time taken.\n    The faster the completion, the more credits earned.\n    Optionally applies leaderboard bonuses based on rank.\n    \"\"\"\n    if seconds_taken &lt;= 0:\n        raise ValueError(\"Time taken must be greater than zero.\")\n\n    multiplier = max(1, int(self.BASE_MULTIPLIER / seconds_taken))\n    earned_credits = int(base_credits * multiplier)\n\n    # Apply leaderboard bonus if leaderboard data is available\n    if leaderboard:\n        bonus_credits = Leaderboard.calculate_bonus(leaderboard, seconds_taken, earned_credits)\n        earned_credits += bonus_credits\n        logging.info(f\"Leaderboard bonus applied: {bonus_credits} credits.\")\n\n    self.add_credits(earned_credits)\n    logging.info(f\"Awarded {earned_credits} credits for {seconds_taken} seconds taken. New balance: {self._stored_credits}\")\n    return earned_credits\n</code></pre>"},{"location":"api_reference/credits/#src.models.credits.Credits.get_credits","title":"<code>get_credits()</code>","text":"<p>Get the user's current credit balance.</p> Source code in <code>src/models/credits.py</code> <pre><code>def get_credits(self) -&gt; int:\n    \"\"\"Get the user's current credit balance.\"\"\"\n    return self._stored_credits\n</code></pre>"},{"location":"api_reference/credits/#src.models.credits.Credits.remove_credits","title":"<code>remove_credits(amount)</code>","text":"<p>Remove credits from the user's account.</p> Source code in <code>src/models/credits.py</code> <pre><code>def remove_credits(self, amount: int) -&gt; None:\n    \"\"\"Remove credits from the user's account.\"\"\"\n    if amount &lt; 0:\n        raise ValueError(\"Amount to spend must be non-negative.\")\n    if amount &gt; self._stored_credits:\n        raise InsufficientCreditsError(\"Not enough credits to spend.\")\n    self._stored_credits -= amount\n    logging.info(f\"Removed {amount} credits. New balance: {self._stored_credits}\")\n</code></pre>"},{"location":"api_reference/credits/#src.models.credits.Credits.update_credits","title":"<code>update_credits(amount)</code>","text":"<p>Update credits by adding (positive) or spending (negative).</p> Source code in <code>src/models/credits.py</code> <pre><code>def update_credits(self, amount: int) -&gt; None:\n    \"\"\"Update credits by adding (positive) or spending (negative).\"\"\"\n    if amount &gt;= 0:\n        self.add_credits(amount)\n    else:\n        self.remove_credits(-amount)\n</code></pre>"},{"location":"api_reference/leaderboard/","title":"Leaderboard","text":"<p>This class represents the credits that a user can use to purchase in-game merchandise.</p> <p>Class to manage leaderboard bonuses and rankings.</p> Source code in <code>src/models/leaderboard.py</code> <pre><code>class Leaderboard:\n    \"\"\"Class to manage leaderboard bonuses and rankings.\"\"\"\n\n    BONUS_PERCENTAGES = {\n        1: 50,   # Rank 1 gets a 50% bonus\n        2: 25,   # Rank 2 gets a 25% bonus\n        3: 10,   # Rank 3 gets a 10% bonus\n    }\n    \"\"\"Leaderboard rank bonuses as percentages.\"\"\"\n\n    @classmethod\n    def get_bonus_percentage(cls, leaderboard: dict, seconds_taken: float) -&gt; int:\n        \"\"\"\n        Get the player's bonus percentage based on their rank determined by the time taken.\n        \"\"\"\n        for rank, top_time in sorted(leaderboard.items()):\n            if seconds_taken &lt;= top_time:\n                return cls.BONUS_PERCENTAGES.get(rank, 1)  # Return the percentage for the rank\n        return 1  # No bonus if not in the top ranks\n\n    @classmethod\n    def calculate_bonus(cls, leaderboard: dict, seconds_taken: float, credits: int) -&gt; int:\n        \"\"\"\n        Calculate the bonus credits earned based on leaderboard rank.\n        \"\"\"\n        bonus_percentage = cls.get_bonus_percentage(leaderboard, seconds_taken)\n        bonus_credits = int(credits * bonus_percentage / 100)  # Calculate percentage-based bonus\n        return bonus_credits\n</code></pre>"},{"location":"api_reference/leaderboard/#src.models.leaderboard.Leaderboard.BONUS_PERCENTAGES","title":"<code>BONUS_PERCENTAGES = {1: 50, 2: 25, 3: 10}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Leaderboard rank bonuses as percentages.</p>"},{"location":"api_reference/leaderboard/#src.models.leaderboard.Leaderboard.calculate_bonus","title":"<code>calculate_bonus(leaderboard, seconds_taken, credits)</code>  <code>classmethod</code>","text":"<p>Calculate the bonus credits earned based on leaderboard rank.</p> Source code in <code>src/models/leaderboard.py</code> <pre><code>@classmethod\ndef calculate_bonus(cls, leaderboard: dict, seconds_taken: float, credits: int) -&gt; int:\n    \"\"\"\n    Calculate the bonus credits earned based on leaderboard rank.\n    \"\"\"\n    bonus_percentage = cls.get_bonus_percentage(leaderboard, seconds_taken)\n    bonus_credits = int(credits * bonus_percentage / 100)  # Calculate percentage-based bonus\n    return bonus_credits\n</code></pre>"},{"location":"api_reference/leaderboard/#src.models.leaderboard.Leaderboard.get_bonus_percentage","title":"<code>get_bonus_percentage(leaderboard, seconds_taken)</code>  <code>classmethod</code>","text":"<p>Get the player's bonus percentage based on their rank determined by the time taken.</p> Source code in <code>src/models/leaderboard.py</code> <pre><code>@classmethod\ndef get_bonus_percentage(cls, leaderboard: dict, seconds_taken: float) -&gt; int:\n    \"\"\"\n    Get the player's bonus percentage based on their rank determined by the time taken.\n    \"\"\"\n    for rank, top_time in sorted(leaderboard.items()):\n        if seconds_taken &lt;= top_time:\n            return cls.BONUS_PERCENTAGES.get(rank, 1)  # Return the percentage for the rank\n    return 1  # No bonus if not in the top ranks\n</code></pre>"}]}